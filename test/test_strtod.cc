#include "base_conv.h"

#include "catch.hpp"

#include <cstring>
#include <limits>

#define HAS_FLOAT 0

#ifdef _MSC_VER
#define ATTRIBUTE_NOINLINE __declspec(noinline)
#else
#define ATTRIBUTE_NOINLINE __attribute__((noinline))
#endif

//static double ATTRIBUTE_NOINLINE div_double(double x, double y)
//{
//    return x / y;
//}
//
//TEST_CASE("Div_double")
//{
//#if DTOA_CORRECT_DOUBLE_OPERATIONS || STRTOD_CORRECT_DOUBLE_OPERATIONS
//    CHECK(89255e-22 == div_double(89255.0, 1e22));
//#endif
//}

#if 0
#include <double-conversion/double-conversion.h>
#include <double-conversion/strtod.h>

static double Strtod(char const* str)
{
    double_conversion::StringToDoubleConverter conv(0, 0.0, 0.0, "inf", "nan");

    int processed_characters_count = 0;
    return conv.StringToDouble(str, static_cast<int>(strlen(str)), &processed_characters_count);
}

static double Strtod(char const* str, int exponent)
{
    return double_conversion::Strtod({str, static_cast<int>(strlen(str))}, exponent);
}

#if HAS_FLOAT
static float Strtof(char const* str, int exponent)
{
    return double_conversion::Strtof({str, static_cast<int>(strlen(str))}, exponent);
}
#endif
#else
static double Strtod(char const* str)
{
    char const* end = str + std::strlen(str);

    double d = 0.0;

    auto const success = base_conv_Strtod(d, str, end);
    CHECK(success);

    return d;
}

static double Strtod(char const* str, int exponent)
{
    return base_conv_DecimalToDouble(str, static_cast<int>(strlen(str)), exponent);
}

#if HAS_FLOAT
static float Strtof(char const* str, int exponent)
{
    return base_conv_DecimalToSingle(str, static_cast<int>(strlen(str)), exponent);
}
#endif
#endif

#define CHECK_EQ(X,Y) CHECK(X == Y)
#define CHECK_DOUBLE(str, expected) CHECK(expected == Strtod(str))

TEST_CASE("Strtod - double-conversion")
{
    // Test cases from:
    // https://github.com/google/double-conversion/blob/master/test/cctest/test-strtod.cc

    char const* vector;

    CHECK_EQ(10000000000000000001e+19, Strtod("10000000000000000001", 19));

    vector = "0";
    CHECK_EQ(0.0, Strtod(vector, 1));
    CHECK_EQ(0.0, Strtod(vector, 2));
    CHECK_EQ(0.0, Strtod(vector, -2));
    CHECK_EQ(0.0, Strtod(vector, -999));
    CHECK_EQ(0.0, Strtod(vector, +999));

    vector = "1";
    CHECK_EQ(1.0, Strtod(vector, 0));
    CHECK_EQ(10.0, Strtod(vector, 1));
    CHECK_EQ(100.0, Strtod(vector, 2));
    CHECK_EQ(1e20, Strtod(vector, 20));
    CHECK_EQ(1e22, Strtod(vector, 22));
    CHECK_EQ(1e23, Strtod(vector, 23));
    CHECK_EQ(1e35, Strtod(vector, 35));
    CHECK_EQ(1e36, Strtod(vector, 36));
    CHECK_EQ(1e37, Strtod(vector, 37));
    CHECK_EQ(1e-1, Strtod(vector, -1));
    CHECK_EQ(1e-2, Strtod(vector, -2));
    CHECK_EQ(1e-5, Strtod(vector, -5));
    CHECK_EQ(1e-20, Strtod(vector, -20));
    CHECK_EQ(1e-22, Strtod(vector, -22));
    CHECK_EQ(1e-23, Strtod(vector, -23));
    CHECK_EQ(1e-25, Strtod(vector, -25));
    CHECK_EQ(1e-39, Strtod(vector, -39));

    vector = "2";
    CHECK_EQ(2.0, Strtod(vector, 0));
    CHECK_EQ(20.0, Strtod(vector, 1));
    CHECK_EQ(200.0, Strtod(vector, 2));
    CHECK_EQ(2e20, Strtod(vector, 20));
    CHECK_EQ(2e22, Strtod(vector, 22));
    CHECK_EQ(2e23, Strtod(vector, 23));
    CHECK_EQ(2e35, Strtod(vector, 35));
    CHECK_EQ(2e36, Strtod(vector, 36));
    CHECK_EQ(2e37, Strtod(vector, 37));
    CHECK_EQ(2e-1, Strtod(vector, -1));
    CHECK_EQ(2e-2, Strtod(vector, -2));
    CHECK_EQ(2e-5, Strtod(vector, -5));
    CHECK_EQ(2e-20, Strtod(vector, -20));
    CHECK_EQ(2e-22, Strtod(vector, -22));
    CHECK_EQ(2e-23, Strtod(vector, -23));
    CHECK_EQ(2e-25, Strtod(vector, -25));
    CHECK_EQ(2e-39, Strtod(vector, -39));

    vector = "9";
    CHECK_EQ(9.0, Strtod(vector, 0));
    CHECK_EQ(90.0, Strtod(vector, 1));
    CHECK_EQ(900.0, Strtod(vector, 2));
    CHECK_EQ(9e20, Strtod(vector, 20));
    CHECK_EQ(9e22, Strtod(vector, 22));
    CHECK_EQ(9e23, Strtod(vector, 23));
    CHECK_EQ(9e35, Strtod(vector, 35));
    CHECK_EQ(9e36, Strtod(vector, 36));
    CHECK_EQ(9e37, Strtod(vector, 37));
    CHECK_EQ(9e-1, Strtod(vector, -1));
    CHECK_EQ(9e-2, Strtod(vector, -2));
    CHECK_EQ(9e-5, Strtod(vector, -5));
    CHECK_EQ(9e-20, Strtod(vector, -20));
    CHECK_EQ(9e-22, Strtod(vector, -22));
    CHECK_EQ(9e-23, Strtod(vector, -23));
    CHECK_EQ(9e-25, Strtod(vector, -25));
    CHECK_EQ(9e-39, Strtod(vector, -39));

    vector = "12345";
    CHECK_EQ(12345.0, Strtod(vector, 0));
    CHECK_EQ(123450.0, Strtod(vector, 1));
    CHECK_EQ(1234500.0, Strtod(vector, 2));
    CHECK_EQ(12345e20, Strtod(vector, 20));
    CHECK_EQ(12345e22, Strtod(vector, 22));
    CHECK_EQ(12345e23, Strtod(vector, 23));
    CHECK_EQ(12345e30, Strtod(vector, 30));
    CHECK_EQ(12345e31, Strtod(vector, 31));
    CHECK_EQ(12345e32, Strtod(vector, 32));
    CHECK_EQ(12345e35, Strtod(vector, 35));
    CHECK_EQ(12345e36, Strtod(vector, 36));
    CHECK_EQ(12345e37, Strtod(vector, 37));
    CHECK_EQ(12345e-1, Strtod(vector, -1));
    CHECK_EQ(12345e-2, Strtod(vector, -2));
    CHECK_EQ(12345e-5, Strtod(vector, -5));
    CHECK_EQ(12345e-20, Strtod(vector, -20));
    CHECK_EQ(12345e-22, Strtod(vector, -22));
    CHECK_EQ(12345e-23, Strtod(vector, -23));
    CHECK_EQ(12345e-25, Strtod(vector, -25));
    CHECK_EQ(12345e-39, Strtod(vector, -39));

    vector = "12345678901234";
    CHECK_EQ(12345678901234.0, Strtod(vector, 0));
    CHECK_EQ(123456789012340.0, Strtod(vector, 1));
    CHECK_EQ(1234567890123400.0, Strtod(vector, 2));
    CHECK_EQ(12345678901234e20, Strtod(vector, 20));
    CHECK_EQ(12345678901234e22, Strtod(vector, 22));
    CHECK_EQ(12345678901234e23, Strtod(vector, 23));
    CHECK_EQ(12345678901234e30, Strtod(vector, 30));
    CHECK_EQ(12345678901234e31, Strtod(vector, 31));
    CHECK_EQ(12345678901234e32, Strtod(vector, 32));
    CHECK_EQ(12345678901234e35, Strtod(vector, 35));
    CHECK_EQ(12345678901234e36, Strtod(vector, 36));
    CHECK_EQ(12345678901234e37, Strtod(vector, 37));
    CHECK_EQ(12345678901234e-1, Strtod(vector, -1));
    CHECK_EQ(12345678901234e-2, Strtod(vector, -2));
    CHECK_EQ(12345678901234e-5, Strtod(vector, -5));
    CHECK_EQ(12345678901234e-20, Strtod(vector, -20));
    CHECK_EQ(12345678901234e-22, Strtod(vector, -22));
    CHECK_EQ(12345678901234e-23, Strtod(vector, -23));
    CHECK_EQ(12345678901234e-25, Strtod(vector, -25));
    CHECK_EQ(12345678901234e-39, Strtod(vector, -39));

    vector = "123456789012345";
    CHECK_EQ(123456789012345.0, Strtod(vector, 0));
    CHECK_EQ(1234567890123450.0, Strtod(vector, 1));
    CHECK_EQ(12345678901234500.0, Strtod(vector, 2));
    CHECK_EQ(123456789012345e20, Strtod(vector, 20));
    CHECK_EQ(123456789012345e22, Strtod(vector, 22));
    CHECK_EQ(123456789012345e23, Strtod(vector, 23));
    CHECK_EQ(123456789012345e35, Strtod(vector, 35));
    CHECK_EQ(123456789012345e36, Strtod(vector, 36));
    CHECK_EQ(123456789012345e37, Strtod(vector, 37));
    CHECK_EQ(123456789012345e39, Strtod(vector, 39));
    CHECK_EQ(123456789012345e-1, Strtod(vector, -1));
    CHECK_EQ(123456789012345e-2, Strtod(vector, -2));
    CHECK_EQ(123456789012345e-5, Strtod(vector, -5));
    CHECK_EQ(123456789012345e-20, Strtod(vector, -20));
    CHECK_EQ(123456789012345e-22, Strtod(vector, -22));
    CHECK_EQ(123456789012345e-23, Strtod(vector, -23));
    CHECK_EQ(123456789012345e-25, Strtod(vector, -25));
    CHECK_EQ(123456789012345e-39, Strtod(vector, -39));

    CHECK_EQ(0.0, Strtod("0", 12345));
    CHECK_EQ(0.0, Strtod("", 1324));
    CHECK_EQ(0.0, Strtod("000000000", 123));
    CHECK_EQ(0.0, Strtod("2", -324));
    CHECK_EQ(4e-324, Strtod("3", -324));
    // It would be more readable to put non-zero literals on the left side (i.e.
    //   CHECK_EQ(1e-325, StrtodChar("1", -325))), but then Gcc complains that
    // they are truncated to zero.
    CHECK_EQ(0.0, Strtod("1", -325));
    CHECK_EQ(0.0, Strtod("1", -325));
    CHECK_EQ(0.0, Strtod("20000", -328));
    CHECK_EQ(40000e-328, Strtod("30000", -328));
    CHECK_EQ(0.0, Strtod("10000", -329));
    CHECK_EQ(0.0, Strtod("90000", -329));
    CHECK_EQ(0.0, Strtod("000000001", -325));
    CHECK_EQ(0.0, Strtod("000000001", -325));
    CHECK_EQ(0.0, Strtod("0000000020000", -328));
    CHECK_EQ(40000e-328, Strtod("00000030000", -328));
    CHECK_EQ(0.0, Strtod("0000000010000", -329));
    CHECK_EQ(0.0, Strtod("0000000090000", -329));

    const double Inf = std::numeric_limits<double>::infinity();

    // It would be more readable to put the literals (and not Double::Infinity())
    // on the left side (i.e. CHECK_EQ(1e309, StrtodChar("1", 309))), but then Gcc
    // complains that the floating constant exceeds range of 'double'.
    CHECK_EQ(Inf, Strtod("1", 309));
    CHECK_EQ(1e308, Strtod("1", 308));
    CHECK_EQ(1234e305, Strtod("1234", 305));
    CHECK_EQ(1234e304, Strtod("1234", 304));
    CHECK_EQ(Inf, Strtod("18", 307));
    CHECK_EQ(17e307, Strtod("17", 307));
    CHECK_EQ(Inf, Strtod("0000001", 309));
    CHECK_EQ(1e308, Strtod("00000001", 308));
    CHECK_EQ(1234e305, Strtod("00000001234", 305));
    CHECK_EQ(1234e304, Strtod("000000001234", 304));
    CHECK_EQ(Inf, Strtod("0000000018", 307));
    CHECK_EQ(17e307, Strtod("0000000017", 307));
    CHECK_EQ(Inf, Strtod("1000000", 303));
    CHECK_EQ(1e308, Strtod("100000", 303));
    CHECK_EQ(1234e305, Strtod("123400000", 300));
    CHECK_EQ(1234e304, Strtod("123400000", 299));
    CHECK_EQ(Inf, Strtod("180000000", 300));
    CHECK_EQ(17e307, Strtod("170000000", 300));
    CHECK_EQ(Inf, Strtod("00000001000000", 303));
    CHECK_EQ(1e308, Strtod("000000000000100000", 303));
    CHECK_EQ(1234e305, Strtod("00000000123400000", 300));
    CHECK_EQ(1234e304, Strtod("0000000123400000", 299));
    CHECK_EQ(Inf, Strtod("00000000180000000", 300));
    CHECK_EQ(17e307, Strtod("00000000170000000", 300));
    CHECK_EQ(1.7976931348623157E+308, Strtod("17976931348623157", 292));
    CHECK_EQ(1.7976931348623158E+308, Strtod("17976931348623158", 292));
    CHECK_EQ(Inf, Strtod("17976931348623159", 292));

    // The following number is the result of 89255.0/1e-22. Both floating-point
    // numbers can be accurately represented with doubles. However on Linux,x86
    // the floating-point stack is set to 80bits and the double-rounding
    // introduces an error.
    CHECK_EQ(89255e-22, Strtod("89255", -22));

    // Some random values.
    CHECK_EQ(358416272e-33, Strtod("358416272", -33));
    CHECK_EQ(104110013277974872254e-225,
            Strtod("104110013277974872254", -225));

    CHECK_EQ(123456789e108, Strtod("123456789", 108));
    CHECK_EQ(123456789e109, Strtod("123456789", 109));
    CHECK_EQ(123456789e110, Strtod("123456789", 110));
    CHECK_EQ(123456789e111, Strtod("123456789", 111));
    CHECK_EQ(123456789e112, Strtod("123456789", 112));
    CHECK_EQ(123456789e113, Strtod("123456789", 113));
    CHECK_EQ(123456789e114, Strtod("123456789", 114));
    CHECK_EQ(123456789e115, Strtod("123456789", 115));

    CHECK_EQ(1234567890123456789012345e108,
             Strtod("1234567890123456789012345", 108));
    CHECK_EQ(1234567890123456789012345e109,
             Strtod("1234567890123456789012345", 109));
    CHECK_EQ(1234567890123456789012345e110,
             Strtod("1234567890123456789012345", 110));
    CHECK_EQ(1234567890123456789012345e111,
             Strtod("1234567890123456789012345", 111));
    CHECK_EQ(1234567890123456789012345e112,
             Strtod("1234567890123456789012345", 112));
    CHECK_EQ(1234567890123456789012345e113,
             Strtod("1234567890123456789012345", 113));
    CHECK_EQ(1234567890123456789012345e114,
             Strtod("1234567890123456789012345", 114));
    CHECK_EQ(1234567890123456789012345e115,
             Strtod("1234567890123456789012345", 115));

    CHECK_EQ(1234567890123456789052345e108,
             Strtod("1234567890123456789052345", 108));
    CHECK_EQ(1234567890123456789052345e109,
             Strtod("1234567890123456789052345", 109));
    CHECK_EQ(1234567890123456789052345e110,
             Strtod("1234567890123456789052345", 110));
    CHECK_EQ(1234567890123456789052345e111,
             Strtod("1234567890123456789052345", 111));
    CHECK_EQ(1234567890123456789052345e112,
             Strtod("1234567890123456789052345", 112));
    CHECK_EQ(1234567890123456789052345e113,
             Strtod("1234567890123456789052345", 113));
    CHECK_EQ(1234567890123456789052345e114,
             Strtod("1234567890123456789052345", 114));
    CHECK_EQ(1234567890123456789052345e115,
             Strtod("1234567890123456789052345", 115));

    CHECK_EQ(5.445618932859895e-255,
             Strtod("5445618932859895362967233318697132813618813095743952975"
                    "4392982234069699615600475529427176366709107287468930197"
                    "8628345413991790019316974825934906752493984055268219809"
                    "5012176093045431437495773903922425632551857520884625114"
                    "6241265881735209066709685420744388526014389929047617597"
                    "0302268848374508109029268898695825171158085457567481507"
                    "4162979705098246243690189880319928315307816832576838178"
                    "2563074014542859888710209237525873301724479666744537857"
                    "9026553346649664045621387124193095870305991178772256504"
                    "4368663670643970181259143319016472430928902201239474588"
                    "1392338901353291306607057623202353588698746085415097902"
                    "6640064319118728664842287477491068264828851624402189317"
                    "2769161449825765517353755844373640588822904791244190695"
                    "2998382932630754670573838138825217065450843010498555058"
                    "88186560731", -1035));

    // Boundary cases. Boundaries themselves should round to even.
    //
    // 0x1FFFFFFFFFFFF * 2^3 = 72057594037927928
    //                   next: 72057594037927936
    //               boundary: 72057594037927932  should round up.
    CHECK_EQ(72057594037927928.0, Strtod("72057594037927928", 0));
    CHECK_EQ(72057594037927936.0, Strtod("72057594037927936", 0));
    CHECK_EQ(72057594037927936.0, Strtod("72057594037927932", 0));
    CHECK_EQ(72057594037927928.0, Strtod("7205759403792793199999", -5));
    CHECK_EQ(72057594037927936.0, Strtod("7205759403792793200001", -5));

    // 0x1FFFFFFFFFFFF * 2^10 = 9223372036854774784
    //                    next: 9223372036854775808
    //                boundary: 9223372036854775296 should round up.
    CHECK_EQ(9223372036854774784.0, Strtod("9223372036854774784", 0));
    CHECK_EQ(9223372036854775808.0, Strtod("9223372036854775808", 0));
    CHECK_EQ(9223372036854775808.0, Strtod("9223372036854775296", 0));
    CHECK_EQ(9223372036854774784.0, Strtod("922337203685477529599999", -5));
    CHECK_EQ(9223372036854775808.0, Strtod("922337203685477529600001", -5));

    // 0x1FFFFFFFFFFFF * 2^50 = 10141204801825834086073718800384
    //                    next: 10141204801825835211973625643008
    //                boundary: 10141204801825834649023672221696 should round up.
    CHECK_EQ(10141204801825834086073718800384.0,
             Strtod("10141204801825834086073718800384", 0));
    CHECK_EQ(10141204801825835211973625643008.0,
             Strtod("10141204801825835211973625643008", 0));
    CHECK_EQ(10141204801825835211973625643008.0,
             Strtod("10141204801825834649023672221696", 0));
    CHECK_EQ(10141204801825834086073718800384.0,
             Strtod("1014120480182583464902367222169599999", -5));
    CHECK_EQ(10141204801825835211973625643008.0,
             Strtod("1014120480182583464902367222169600001", -5));

    // 0x1FFFFFFFFFFFF * 2^99 = 5708990770823838890407843763683279797179383808
    //                    next: 5708990770823839524233143877797980545530986496
    //                boundary: 5708990770823839207320493820740630171355185152
    // The boundary should round up.
    CHECK_EQ(5708990770823838890407843763683279797179383808.0,
             Strtod("5708990770823838890407843763683279797179383808", 0));
    CHECK_EQ(5708990770823839524233143877797980545530986496.0,
             Strtod("5708990770823839524233143877797980545530986496", 0));
    CHECK_EQ(5708990770823839524233143877797980545530986496.0,
             Strtod("5708990770823839207320493820740630171355185152", 0));
    CHECK_EQ(5708990770823838890407843763683279797179383808.0,
             Strtod("5708990770823839207320493820740630171355185151999", -3));
    CHECK_EQ(5708990770823839524233143877797980545530986496.0,
             Strtod("5708990770823839207320493820740630171355185152001", -3));

    // The following test-cases got some public attention in early 2011 when they
    // sent Java and PHP into an infinite loop.
    CHECK_EQ(2.225073858507201e-308, Strtod("22250738585072011", -324));
    CHECK_EQ(2.22507385850720138309e-308,
             Strtod("22250738585072011360574097967091319759348195463516456480"
                    "23426109724822222021076945516529523908135087914149158913"
                    "03962110687008643869459464552765720740782062174337998814"
                    "10632673292535522868813721490129811224514518898490572223"
                    "07285255133155755015914397476397983411801999323962548289"
                    "01710708185069063066665599493827577257201576306269066333"
                    "26475653000092458883164330377797918696120494973903778297"
                    "04905051080609940730262937128958950003583799967207254304"
                    "36028407889577179615094551674824347103070260914462157228"
                    "98802581825451803257070188608721131280795122334262883686"
                    "22321503775666622503982534335974568884423900265498198385"
                    "48794829220689472168983109969836584681402285424333066033"
                    "98508864458040010349339704275671864433837704860378616227"
                    "71738545623065874679014086723327636718751", -1076));
}

TEST_CASE("Strtod - 1")
{
    CHECK_DOUBLE("10000000000000000009e+0",  10000000000000000009e+0 );
    CHECK_DOUBLE("10000000000000000009e+1",  10000000000000000009e+1 );
    CHECK_DOUBLE("10000000000000000009e+2",  10000000000000000009e+2 );
    CHECK_DOUBLE("10000000000000000009e+3",  10000000000000000009e+3 );
    CHECK_DOUBLE("10000000000000000009e+4",  10000000000000000009e+4 );
    CHECK_DOUBLE("10000000000000000009e+5",  10000000000000000009e+5 );
    CHECK_DOUBLE("10000000000000000009e+6",  10000000000000000009e+6 );
    CHECK_DOUBLE("10000000000000000009e+7",  10000000000000000009e+7 );
    CHECK_DOUBLE("10000000000000000009e+8",  10000000000000000009e+8 );
    CHECK_DOUBLE("10000000000000000009e+9",  10000000000000000009e+9 );
    CHECK_DOUBLE("10000000000000000009e+10", 10000000000000000009e+10);
    CHECK_DOUBLE("10000000000000000009e+11", 10000000000000000009e+11);
    CHECK_DOUBLE("10000000000000000009e+12", 10000000000000000009e+12);
    CHECK_DOUBLE("10000000000000000009e+13", 10000000000000000009e+13);
    CHECK_DOUBLE("10000000000000000009e+14", 10000000000000000009e+14);
    CHECK_DOUBLE("10000000000000000009e+15", 10000000000000000009e+15);
    CHECK_DOUBLE("10000000000000000009e+16", 10000000000000000009e+16);
    CHECK_DOUBLE("1000000000000000000.0000000000000000001",
        1000000000000000000.0000000000000000001);
    CHECK_DOUBLE("59.79470570797252226166574973080902316556696507444245101698",
        59.79470570797252226166574973080902316556696507444245101698);

    CHECK_DOUBLE("0e+0", 0.0);
    CHECK_DOUBLE("0e+100", 0.0);
    CHECK_DOUBLE("0e+2147483647", 0.0);
    CHECK_DOUBLE("0e-0", 0.0);
    CHECK_DOUBLE("0e-100", 0.0);
    CHECK_DOUBLE("0e-2147483648", 0.0);
    CHECK_DOUBLE("1e-2147483649", 0.0);
    CHECK_DOUBLE("1e-2147483648", 0.0);
    CHECK_DOUBLE("1e-2147483647", 0.0);
    CHECK_DOUBLE("1e+2147483647", std::numeric_limits<double>::infinity());
    CHECK_DOUBLE("1e+2147483648", std::numeric_limits<double>::infinity());
    CHECK_DOUBLE("1e-100000", 0.0);
    CHECK_DOUBLE("1e-1000", 0.0);
    CHECK_DOUBLE("1e-325", 0.0);
    CHECK_DOUBLE("4.9406564584124653e-324", 4.9406564584124653e-324);
    CHECK_DOUBLE("4.94065645841246539999999999999999999999999999999999999999999999999999999999e-324",
        4.94065645841246539999999999999999999999999999999999999999999999999999999999e-324);
    CHECK_DOUBLE("4.9406564584124654e-324", 4.9406564584124654e-324); // min denormal
    CHECK_DOUBLE("4.94065645841246540000000000000000000000000000000000000000000000000000000001e-324",
        4.94065645841246540000000000000000000000000000000000000000000000000000000001e-324);
    CHECK_DOUBLE("4.9406564584124655e-324", 4.9406564584124655e-324);
    CHECK_DOUBLE("1e-324", 0.0);
    CHECK_DOUBLE("2e-324", 0.0);
    CHECK_DOUBLE("2.4703282292062327e-324", 0.0);
    CHECK_DOUBLE("2.4703282292062328e-324", 2.4703282292062328e-324);
    CHECK_DOUBLE("2.48e-324", 2.48e-324);
    CHECK_DOUBLE("2.5e-324", 2.5e-324);
    CHECK_DOUBLE("2.500000000000000000000000000000000000000000000000000000000000000000000000001e-324",
        2.500000000000000000000000000000000000000000000000000000000000000000000000001e-324);
    CHECK_DOUBLE("3e-324", 3e-324);
    CHECK_DOUBLE("4e-324", 4e-324);
    CHECK_DOUBLE("5e-324", 5e-324); // min denormal
    CHECK_DOUBLE("2.225073858507201e-308", 2.225073858507201e-308); // max denormal
    CHECK_DOUBLE("2.2250738585072014e-308", 2.2250738585072014e-308); // min normal
    CHECK_DOUBLE("1.7976931348623157e+308", 1.7976931348623157e+308); // max normal
    CHECK_DOUBLE("1.7976931348623156999999999999999999999999999999999999999999999999999e+308",
        1.7976931348623156999999999999999999999999999999999999999999999999999e+308);
    CHECK_DOUBLE("1.7976931348623157000000000000000000000000000000000000000000000000001e+308",
        1.7976931348623157000000000000000000000000000000000000000000000000001e+308);
    CHECK_DOUBLE("1e-323", 1e-323);
    CHECK_DOUBLE("2e-323", 2e-323);
    CHECK_DOUBLE("3e-323", 3e-323);
    CHECK_DOUBLE("4e-323", 4e-323);
    CHECK_DOUBLE("1.7976931348623158e+308", 1.7976931348623158e+308);
    CHECK_DOUBLE(
        "17976931348623157081452742373170435679807056752584499659891747680315726"
        "07800285387605895586327668781715404589535143824642343213268894641827684"
        "67546703537516986049910576551282076245490090389328944075868508455133942"
        "30458323690322294816580855933212334827479782620414472316873817718091929"
        "9881250404026184124858368",
        std::numeric_limits<double>::max());
    CHECK_DOUBLE(
        "0.0000000000000000000000000000000000000000000000000000000000"
        "000000000000000000000000000000000000000000000000000000000000"
        "000000000000000000000000000000000000000000000000000000000000"
        "000000000000000000000000000000000000000000000000000000000000"
        "000000000000000000000000000000000000000000000000000000000000"
        "000000000000000000000000049406564584124654417656879286822137"
        "236505980261432476442558568250067550727020875186529983636163"
        "599237979656469544571773092665671035593979639877479601078187"
        "812630071319031140452784581716784898210368871863605699873072"
        "305000638740915356498438731247339727316961514003171538539807"
        "412623856559117102665855668676818703956031062493194527159149"
        "245532930545654440112748012970999954193198940908041656332452"
        "475714786901472678015935523861155013480352649347201937902681"
        "071074917033322268447533357208324319360923828934583680601060"
        "115061698097530783422773183292479049825247307763759272478746"
        "560847782037344696995336470179726777175851256605511991315048"
        "911014510378627381672509558373897335989936648099411642057026"
        "37090279242767544565229087538682506419718265533447265625",
        std::numeric_limits<double>::denorm_min());
    CHECK_DOUBLE(
        "243546080556034731077856379609316893158278902575447060151047"
        "212703405344938119816206067372775299130836050315842578309818"
        "316450894337978612745889730079163798234256495613858256849283"
        "467066859489192118352020514036083287319232435355752493038825"
        "828481044358810649108367633313557305310641892225870327827273"
        "41408256.000000",
        2.4354608055603473e+307);
    CHECK_DOUBLE("2.2250738585072011e-308", 2.2250738585072011e-308);
    CHECK_DOUBLE(
        "2.4703282292062327208828439643411068618252990130716238221279"
        "284125033775363510437593264991818081799618989828234772285886"
        "546332835517796989819938739800539093906315035659515570226392"
        "290858392449105184435931802849936536152500319370457678249219"
        "365623669863658480757001585769269903706311928279558551332927"
        "834338409351978015531246597263579574622766465272827220056374"
        "006485499977096599470454020828166226237857393450736339007967"
        "761930577506740176324673600968951340535537458516661134223766"
        "678604162159680461914467291840300530057530849048765391711386"
        "591646239524912623653881879636239373280423891018672348497668"
        "235089863388587925628302755995657524455507255189313690836254"
        "779186948667994968324049705821028513185451396213837722826145"
        "437693412532098591327667236328125001e-324",
        5e-324);

    CHECK_DOUBLE(
        "0.00000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000000000000000000000000000000000000000000000"
        "0000000000000000000024703282292062327208828439643411068618252"
        "9901307162382212792841250337753635104375932649918180817996189"
        "8982823477228588654633283551779698981993873980053909390631503"
        "5659515570226392290858392449105184435931802849936536152500319"
        "3704576782492193656236698636584807570015857692699037063119282"
        "7955855133292783433840935197801553124659726357957462276646527"
        "2827220056374006485499977096599470454020828166226237857393450"
        "7363390079677619305775067401763246736009689513405355374585166"
        "6113422376667860416215968046191446729184030053005753084904876"
        "5391711386591646239524912623653881879636239373280423891018672"
        "3484976682350898633885879256283027559956575244555072551893136"
        "9083625477918694866799496832404970582102851318545139621383772"
        "2826145437693412532098591327667236328125",
        0.0);
    CHECK_DOUBLE(
        "0.000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000247032822920623272088284396434"
        "11068618252990130716238221279284125033775363510437593264991818081799618"
        "98982823477228588654633283551779698981993873980053909390631503565951557"
        "02263922908583924491051844359318028499365361525003193704576782492193656"
        "23669863658480757001585769269903706311928279558551332927834338409351978"
        "01553124659726357957462276646527282722005637400648549997709659947045402"
        "08281662262378573934507363390079677619305775067401763246736009689513405"
        "35537458516661134223766678604162159680461914467291840300530057530849048"
        "76539171138659164623952491262365388187963623937328042389101867234849766"
        "82350898633885879256283027559956575244555072551893136908362547791869486"
        "67994968324049705821028513185451396213837722826145437693412532098591327"
        "6672363281255",
        5e-324);
    CHECK_DOUBLE(
        "0.000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000247032822920623272088284396434"
        "11068618252990130716238221279284125033775363510437593264991818081799618"
        "98982823477228588654633283551779698981993873980053909390631503565951557"
        "02263922908583924491051844359318028499365361525003193704576782492193656"
        "23669863658480757001585769269903706311928279558551332927834338409351978"
        "01553124659726357957462276646527282722005637400648549997709659947045402"
        "08281662262378573934507363390079677619305775067401763246736009689513405"
        "35537458516661134223766678604162159680461914467291840300530057530849048"
        "76539171138659164623952491262365388187963623937328042389101867234849766"
        "82350898633885879256283027559956575244555072551893136908362547791869486"
        "67994968324049705821028513185451396213837722826145437693412532098591327"
        "667236328126",
        5e-324);
    CHECK_DOUBLE("0.500000000000000166533453693773481063544750213623046875",
        0.500000000000000166533453693773481063544750213623046875);
    CHECK_DOUBLE("3.518437208883201171875e13", 3.518437208883201171875e13);
    CHECK_DOUBLE("62.5364939768271845828", 62.5364939768271845828);
    CHECK_DOUBLE("8.10109172351e-10", 8.10109172351e-10);
    CHECK_DOUBLE("1.50000000000000011102230246251565404236316680908203125",
        1.50000000000000011102230246251565404236316680908203125);
    CHECK_DOUBLE("9007199254740991.4999999999999999999999999999999995",
        9007199254740991.4999999999999999999999999999999995);
    CHECK_DOUBLE("1.2345678901234567e22", 1.2345678901234567e22);
    CHECK_DOUBLE("2.2250738585072011e-308", 2.2250738585072011e-308);
    CHECK_DOUBLE(
        "6.6312368714697582767853966302759672433990999473553031442499717"
        "587362866301392654396180682007880487441059604205526018528897150"
        "063763256665955396033303618005191075917832333584923372080578494"
        "993608994251286407188566165030934449228547591599881603044399098"
        "682919739314266256986631577498362522745234853124423586512070512"
        "924530832781161439325697279187097860044978723221938561502254152"
        "119972830784963194121246401117772161481107528151017752957198119"
        "743384519360959074196224175384736794951486324803914359317679811"
        "223967034438033355297560033532098300718322306892013830155987921"
        "841729099279241763393155074022348361207309147831684007154624400"
        "538175927027662135590421159867638194826541287705957668068727833"
        "49146967171293949598850675682115696218943412532098591327667236328125E-316",
        6.631236846766476e-316);
    CHECK_DOUBLE(
        "3.2378839133029012895883524125015321748630376694231080599012970"
        "495523019706706765657868357425877995578606157765598382834355143"
        "910841531692526891905643964595773946180389283653051434639551003"
        "566966656292020173313440317300443693602052583458034314716600326"
        "995807313009548483639755486900107515300188817581841745696521731"
        "104736960227499346384253806233697747365600089974040609674980283"
        "891918789639685754392222064169814626901133425240027243859416510"
        "512935526014211553334302252372915238433223313261384314778235911"
        "424088000307751706259156707286570031519536642607698224949379518"
        "458015308952384398197084033899378732414634842056080000272705311"
        "068273879077914449185347715987501628125488627684932015189916680"
        "28251730299953143924168545708663913273994694463908672332763671875E-319",
        3.2379086165851934e-319);
    CHECK_DOUBLE(
        "6.953355807847677105972805215521891690222119817145950754416205607980030"
        "13154963668880611572639944188006538639986402869127553953941465283158479"
        "56685600829998895513577849614468960421131982842131079351102171626549398"
        "02416034676213829409720583759540476786936413816541621287843248433202369"
        "20991661224967600557302270324479971462211654218883777037602237117207955"
        "91258533828013962195524188394697705149041926576270603193728475623010741"
        "40442660237844114174497210955449896389180395827191602886654488182452409"
        "58398138944278337700150546201574501784875457466834216175949666176602002"
        "87528887833870748507731929971029979366198762266880963149896457660004790"
        "09083731736585750335262099860150896718774401964796827166283225641992040"
        "747894382698751809812609536720628966577351093292236328125E-310",
        6.9533558078476524e-310);
    CHECK_DOUBLE(
        "3.339068557571188581835713701280943911923401916998521771655656997328440"
        "31455961531816884914907466260909999811300946556642680817037843406572299"
        "16596426194677060348844249897410807907667784563321682004646515939958173"
        "71782125010668346652995912233993254584461125868481633343674905074271064"
        "40976309070801785658401977687881242531200881232626036303547481153223685"
        "33599053346255754042160606228586332807443018924703005556787346899784768"
        "70369853549413277156622170245846166991655321535529623870646888786637528"
        "99559280043617790174628627227337447170145299143304725786386460142425202"
        "47915673681950560773208853293843223323915646452641434007986196650406080"
        "77549162173963649264049738362290606875883456826586710961041737908872035"
        "803481241600376705491726170293986797332763671875E-319",
        3.3390932608534806e-319);
    CHECK_DOUBLE("2.2250738585072012e-308", 2.2250738585072012e-308);
    CHECK_DOUBLE("2.2250738585072011e-308", 2.2250738585072011e-308);

    CHECK_DOUBLE("6114917000000003e-14", 6114917000000003e-14);

    // 9007199254740991 * 2^-1074 = (2^53 - 1) * 2^-1074
    CHECK_DOUBLE(
        "4.450147717014402272114819593418263951869639092703291296046852219449644444042153"
        "89103305904781627017582829831782607924221374017287738918929105531441481564124348"
        "67599762821265346585071045737627442980259622449029037796981144446145705102663115"
        "10031828794952795966823603998647925096578034214163701381261333311989876551545144"
        "03152612538132666529513060001849177663286607555958373922409899478075565940981010"
        "21612198814605258742579179000071675999344145086087205681577915435923018910334964"
        "86942061405218289243144579760516365090360651414037721744226256159024466852576737"
        "24464300755133324500796506867194913776884780053099639677097589658441378944337966"
        "21993967316936280457084866613206797017728916080020698679408551343728867675409720"
        "757232455434770912461317493580281734466552734375e-308",
        4.450147717014402272e-308 //        0x1.fffffffffffffp-1022
        );
    // 9007199254740990 * 2^-1074
    CHECK_DOUBLE(
        "4.450147717014401778049173752171719775300846224481918930987049605124880018456471"
        "39035755177760751831052846195619008686241717547743167145836439860405887584484471"
        "19639655002484083577939142623582164522087943959208000909794783876158397872163051"
        "22622675229968408654350206725478309956546318828765627255022767720818849892988457"
        "26333908582101604036318532842699932130356061901518261174396928478121372742040102"
        "17446565569357687263889031732270082446958029584739170416643195242132750803227473"
        "16608838720742955671061336566907126801014814608027120593609275183716632624844904"
        "31985250929886016737037234388448352929102742708402644340627409931664203093081360"
        "70794835812045179006047003875039546061891526346421705014598610179523165038319441"
        "51446491086954182492263498716056346893310546875e-308",
        4.450147717014401778e-308 //        0x1.ffffffffffffep-1022
        );
    // half way between the two numbers above.
    // round to nearest even.
    CHECK_DOUBLE(
        "4.450147717014402025081996672794991863585242658592605113516950912287262231249312"
        "64069530541271189424317838013700808305231545782515453032382772695923684574304409"
        "93619708911874715081505094180604803751173783204118519353387964161152051487413083"
        "16327252012460602310586905362063117526562176521464664318142050516404363222266800"
        "64743260560117135282915796422274554896821334728738317548403413978098469341510556"
        "19529382191981473003234105366170879223151087335413188049110555339027884856781219"
        "01775450062980622457102958163711745945687733011032421168917765671370549738710820"
        "78224775842509670618916870627821633352993761380751142008862499795052791018709663"
        "46394401564490729731565935244123171539810221213221201847003580761626016356864581"
        "1358486831521563686919762403704226016998291015625e-308",
        4.450147717014401778e-308 //        0x1.ffffffffffffep-1022
        );
    CHECK_DOUBLE(
        "4.450147717014402025081996672794991863585242658592605113516950912287262231249312"
        "64069530541271189424317838013700808305231545782515453032382772695923684574304409"
        "93619708911874715081505094180604803751173783204118519353387964161152051487413083"
        "16327252012460602310586905362063117526562176521464664318142050516404363222266800"
        "64743260560117135282915796422274554896821334728738317548403413978098469341510556"
        "19529382191981473003234105366170879223151087335413188049110555339027884856781219"
        "01775450062980622457102958163711745945687733011032421168917765671370549738710820"
        "78224775842509670618916870627821633352993761380751142008862499795052791018709663"
        "46394401564490729731565935244123171539810221213221201847003580761626016356864581"
        "13584868315215636869197624037042260169982910156250000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000e-308",
        4.450147717014401778e-308 //        0x1.ffffffffffffep-1022
        );
    // ... round up
    CHECK_DOUBLE(
        "4.450147717014402025081996672794991863585242658592605113516950912287262231249312"
        "64069530541271189424317838013700808305231545782515453032382772695923684574304409"
        "93619708911874715081505094180604803751173783204118519353387964161152051487413083"
        "16327252012460602310586905362063117526562176521464664318142050516404363222266800"
        "64743260560117135282915796422274554896821334728738317548403413978098469341510556"
        "19529382191981473003234105366170879223151087335413188049110555339027884856781219"
        "01775450062980622457102958163711745945687733011032421168917765671370549738710820"
        "78224775842509670618916870627821633352993761380751142008862499795052791018709663"
        "46394401564490729731565935244123171539810221213221201847003580761626016356864581"
        "13584868315215636869197624037042260169982910156250000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000001e-308",
        4.450147717014402272e-308 //        0x1.fffffffffffffp-1022
        );
    // ... round down
    CHECK_DOUBLE(
        "4.450147717014402025081996672794991863585242658592605113516950912287262231249312"
        "64069530541271189424317838013700808305231545782515453032382772695923684574304409"
        "93619708911874715081505094180604803751173783204118519353387964161152051487413083"
        "16327252012460602310586905362063117526562176521464664318142050516404363222266800"
        "64743260560117135282915796422274554896821334728738317548403413978098469341510556"
        "19529382191981473003234105366170879223151087335413188049110555339027884856781219"
        "01775450062980622457102958163711745945687733011032421168917765671370549738710820"
        "78224775842509670618916870627821633352993761380751142008862499795052791018709663"
        "46394401564490729731565935244123171539810221213221201847003580761626016356864581"
        "13584868315215636869197624037042260169982910156249999999999999999999999999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999e-308",
        4.450147717014401778e-308 //        0x1.ffffffffffffep-1022
        );

    // 9007199254740989 * 2^-1074
    CHECK_DOUBLE(
        "4.450147717014401283983527910925175598732053356260546565927246990800115592870788"
        "88968204450739876644522862559455409448262061078198595372743774189370293604844593"
        "71679547183702820570807239509536886063916265469386964022608423306171090641662987"
        "35213521664984021341876809452308694816514603443367553128784202129647823234431770"
        "49515204626070541543124005683550686597425516247078148426383957478167179543099194"
        "13280932324110115785198884464468488894571914083391135151708475048342482696119981"
        "46275616036267622098978093373297888511668977802016519442992294208408798397113071"
        "39506201104638708973277961909701792081320705363705649004157230204887027241824755"
        "19595704307154077555009141136872295106054136612822711349788669015317462401229162"
        "271697366304312737383952480740845203399658203125e-308",
        4.450147717014401284e-308 //        0x1.ffffffffffffdp-1022
        );

    // min denormal = 2^-1074
    CHECK_DOUBLE(
        "4.940656458412465441765687928682213723650598026143247644255856825006755072702087"
        "51865299836361635992379796564695445717730926656710355939796398774796010781878126"
        "30071319031140452784581716784898210368871863605699873072305000638740915356498438"
        "73124733972731696151400317153853980741262385655911710266585566867681870395603106"
        "24931945271591492455329305456544401127480129709999541931989409080416563324524757"
        "14786901472678015935523861155013480352649347201937902681071074917033322268447533"
        "35720832431936092382893458368060106011506169809753078342277318329247904982524730"
        "77637592724787465608477820373446969953364701797267771758512566055119913150489110"
        "14510378627381672509558373897335989936648099411642057026370902792427675445652290"
        "87538682506419718265533447265625e-324",
        4.940656458412465442e-324 //        0x0.0000000000001p-1022
        );
    // 2 * 2^-1074
    CHECK_DOUBLE(
        "9.881312916824930883531375857364427447301196052286495288511713650013510145404175"
        "03730599672723271984759593129390891435461853313420711879592797549592021563756252"
        "60142638062280905569163433569796420737743727211399746144610001277481830712996877"
        "46249467945463392302800634307707961482524771311823420533171133735363740791206212"
        "49863890543182984910658610913088802254960259419999083863978818160833126649049514"
        "29573802945356031871047722310026960705298694403875805362142149834066644536895066"
        "71441664863872184765786916736120212023012339619506156684554636658495809965049461"
        "55275185449574931216955640746893939906729403594535543517025132110239826300978220"
        "29020757254763345019116747794671979873296198823284114052741805584855350891304581"
        "7507736501283943653106689453125e-324",
        9.881312916824930884e-324 //        0x0.0000000000002p-1022
        );
    // half-way between the two smallest (subnormal) numbers: (1 * 2^-1074 + 2 * 2^-1074) / 2
    // round to nearest even
    CHECK_DOUBLE(
        "7.410984687618698162648531893023320585475897039214871466383785237510132609053131"
        "27797949754542453988569694847043168576596389985065533909694598162194016172817189"
        "45106978546710679176872575177347315553307795408549809608457500958111373034747658"
        "09687100959097544227100475730780971111893578483867565399878350301522805593404659"
        "37397917907387238682993958184816601691220194564999312897984113620624844986787135"
        "72180352209017023903285791732520220528974020802906854021606612375549983402671300"
        "03581248647904138574340187552090159017259254714629617513415977493871857473787096"
        "16456389087181198412716730560170454930047052695901657637768849082679869725733665"
        "21765567941072508764337560846003984904972149117463085539556354188641513168478436"
        "313080237596295773983001708984375e-324",
        9.881312916824930884e-324 //        0x0.0000000000002p-1022
        );
    // round up
    CHECK_DOUBLE(
        "7.410984687618698162648531893023320585475897039214871466383785237510132609053131"
        "27797949754542453988569694847043168576596389985065533909694598162194016172817189"
        "45106978546710679176872575177347315553307795408549809608457500958111373034747658"
        "09687100959097544227100475730780971111893578483867565399878350301522805593404659"
        "37397917907387238682993958184816601691220194564999312897984113620624844986787135"
        "72180352209017023903285791732520220528974020802906854021606612375549983402671300"
        "03581248647904138574340187552090159017259254714629617513415977493871857473787096"
        "16456389087181198412716730560170454930047052695901657637768849082679869725733665"
        "21765567941072508764337560846003984904972149117463085539556354188641513168478436"
        "31308023759629577398300170898437500000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000001e-324",
        9.881312916824930884e-324 //        0x0.0000000000002p-1022
        );
    // round down
    CHECK_DOUBLE(
        "7.410984687618698162648531893023320585475897039214871466383785237510132609053131"
        "27797949754542453988569694847043168576596389985065533909694598162194016172817189"
        "45106978546710679176872575177347315553307795408549809608457500958111373034747658"
        "09687100959097544227100475730780971111893578483867565399878350301522805593404659"
        "37397917907387238682993958184816601691220194564999312897984113620624844986787135"
        "72180352209017023903285791732520220528974020802906854021606612375549983402671300"
        "03581248647904138574340187552090159017259254714629617513415977493871857473787096"
        "16456389087181198412716730560170454930047052695901657637768849082679869725733665"
        "21765567941072508764337560846003984904972149117463085539556354188641513168478436"
        "31308023759629577398300170898437499999999999999999999999999999999999999999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999e-324",
        4.940656458412465442e-324 //        0x0.0000000000001p-1022
        );

    // 9007199254740991 * 2^971 (max normal)
    CHECK_DOUBLE(
        "1.797693134862315708145274237317043567980705675258449965989174768031572607800285"
        "38760589558632766878171540458953514382464234321326889464182768467546703537516986"
        "04991057655128207624549009038932894407586850845513394230458323690322294816580855"
        "9332123348274797826204144723168738177180919299881250404026184124858368e+308",
        1.797693134862315708e+308 //        0x1.fffffffffffffp1023
        );
    // 9007199254740992 * 2^971 ("infinity")
    CHECK_DOUBLE(
        "1.797693134862315907729305190789024733617976978942306572734300811577326758055009"
        "63132708477322407536021120113879871393357658789768814416622492847430639474124377"
        "76789342486548527630221960124609411945308295208500576883815068234246288147391311"
        "0540827237163350510684586298239947245938479716304835356329624224137216e+308",
        std::numeric_limits<double>::infinity()
        );
    // half way between max-normal and infinity
    // should round to infinity in nearest-even mode.
    CHECK_DOUBLE(
        "1.797693134862315807937289714053034150799341327100378269361737789804449682927647"
        "50946649017977587207096330286416692887910946555547851940402630657488671505820681"
        "90890200070838367627385484581771153176447573027006985557136695962284291481986083"
        "49364752927190741684443655107043427115596995080930428801779041744977920000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000e+308",
        std::numeric_limits<double>::infinity()
        );
    // ...round down
    CHECK_DOUBLE(
        "1.797693134862315807937289714053034150799341327100378269361737789804449682927647"
        "50946649017977587207096330286416692887910946555547851940402630657488671505820681"
        "90890200070838367627385484581771153176447573027006985557136695962284291481986083"
        "49364752927190741684443655107043427115596995080930428801779041744977919999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999"
        "99999999999999999999999999999999999999999999999999999999999999999999999999999999e+308",
        1.797693134862315708e+308 //        0x1.fffffffffffffp1023
        );
    // ...round up
    CHECK_DOUBLE(
        "1.797693134862315807937289714053034150799341327100378269361737789804449682927647"
        "50946649017977587207096330286416692887910946555547851940402630657488671505820681"
        "90890200070838367627385484581771153176447573027006985557136695962284291481986083"
        "49364752927190741684443655107043427115596995080930428801779041744977920000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000000"
        "00000000000000000000000000000000000000000000000000000000000000000000000000000001e+308",
        std::numeric_limits<double>::infinity()
        );

    CHECK_DOUBLE(
        "2.22507385850720212418870147920222032907240528279439037814303133837435107319244"
        "1946867544064325638818513821882185024380699999477330130056498841077919287413419"
        "2929720097048195199306799329096904278406473168204156592672863293363047467012331"
        "6852983422152744517260835859654566319282835244787787799894310779783833699159288"
        "5945552137141811284582511455843192230798975043950868594124572308917389461693683"
        "7232119137365897797772328669884035639025104444303545739673370658398105542045669"
        "3824658413747607155981176573877626747665912387199931904006317334709003012790188"
        "1752034471902500280612777779167983910905785840064647159438105114891542827750411"
        "7468219413395246668250343130618158782937900420539237507208336669324158000275839"
        "1118854188641513168478436313080237596295773983001708984375e-308",
        2.225073858507202371e-308 //        0x1.0000000000002p-1022
        );
}

TEST_CASE("Strtod - 2")
{
    static constexpr double const kInf = std::numeric_limits<double>::infinity();

    CHECK_DOUBLE("1e+2147483646", kInf);
    CHECK_DOUBLE("1e+2147483647", kInf);
    CHECK_DOUBLE("1e+2147483648", kInf);
    CHECK_DOUBLE("1e-2147483646", 0.0);
    CHECK_DOUBLE("1e-2147483647", 0.0);
    CHECK_DOUBLE("1e-2147483648", 0.0);
    CHECK_DOUBLE("1e-2147483649", 0.0);
    CHECK_DOUBLE("-1e-2147483646", -0.0);
    CHECK_DOUBLE("-1e-2147483647", -0.0);
    CHECK_DOUBLE("-1e-2147483648", -0.0);
    CHECK_DOUBLE("-1e-2147483649", -0.0);
    CHECK_DOUBLE("1.0e+9223372036854775806", kInf);
    CHECK_DOUBLE("1.0e+9223372036854775807", kInf);
    CHECK_DOUBLE("1.0e+9223372036854775808", kInf);
    CHECK_DOUBLE("1.0e-9223372036854775806", 0.0);
    CHECK_DOUBLE("1.0e-9223372036854775807", 0.0);
    CHECK_DOUBLE("1.0e-9223372036854775808", 0.0);
    CHECK_DOUBLE("1.0e-9223372036854775809", 0.0);
    CHECK_DOUBLE("-1.0e-9223372036854775806", -0.0);
    CHECK_DOUBLE("-1.0e-9223372036854775807", -0.0);
    CHECK_DOUBLE("-1.0e-9223372036854775808", -0.0);
    CHECK_DOUBLE("-1.0e-9223372036854775809", -0.0);
    CHECK_DOUBLE("1000.0e+9223372036854775806", kInf);
    CHECK_DOUBLE("1000.0e+9223372036854775807", kInf);
    CHECK_DOUBLE("1000.0e+9223372036854775808", kInf);
    CHECK_DOUBLE("1000.0e-9223372036854775806", 0.0);
    CHECK_DOUBLE("1000.0e-9223372036854775807", 0.0);
    CHECK_DOUBLE("1000.0e-9223372036854775808", 0.0);
    CHECK_DOUBLE("1000.0e-9223372036854775809", 0.0);
    CHECK_DOUBLE("-1000.0e-9223372036854775806", -0.0);
    CHECK_DOUBLE("-1000.0e-9223372036854775807", -0.0);
    CHECK_DOUBLE("-1000.0e-9223372036854775808", -0.0);
    CHECK_DOUBLE("-1000.0e-9223372036854775809", -0.0);
    CHECK_DOUBLE("0.0001e+9223372036854775806", kInf);
    CHECK_DOUBLE("0.0001e+9223372036854775807", kInf);
    CHECK_DOUBLE("0.0001e+9223372036854775808", kInf);
    CHECK_DOUBLE("0.0001e-9223372036854775806", 0.0);
    CHECK_DOUBLE("0.0001e-9223372036854775807", 0.0);
    CHECK_DOUBLE("0.0001e-9223372036854775808", 0.0);
    CHECK_DOUBLE("0.0001e-9223372036854775809", 0.0);
    CHECK_DOUBLE("-0.0001e-9223372036854775806", -0.0);
    CHECK_DOUBLE("-0.0001e-9223372036854775807", -0.0);
    CHECK_DOUBLE("-0.0001e-9223372036854775808", -0.0);
    CHECK_DOUBLE("-0.0001e-9223372036854775809", -0.0);

    CHECK_DOUBLE("1.0e+1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", kInf);
    CHECK_DOUBLE("1.0e-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", 0.0);
    CHECK_DOUBLE("1.0e+0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", 10.0);
    CHECK_DOUBLE("1.0e+0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", kInf);
}

TEST_CASE("Testbase - double")
{
    // Table 1: Stress Inputs for Conversion to 53-bit Binary, < 1/2 ULP

    CHECK_EQ(Strtod("5", +125), 5e+125);
    CHECK_EQ(Strtod("69", +267), 69e+267);
    CHECK_EQ(Strtod("999", -26), 999e-026);
    CHECK_EQ(Strtod("7861", -34), 7861e-034);
    CHECK_EQ(Strtod("75569", -254), 75569e-254);
    CHECK_EQ(Strtod("928609", -261), 928609e-261);
    CHECK_EQ(Strtod("9210917", +80), 9210917e+080);
    CHECK_EQ(Strtod("84863171", +114), 84863171e+114);
    CHECK_EQ(Strtod("653777767", +273), 653777767e+273);
    CHECK_EQ(Strtod("5232604057", -298), 5232604057e-298);
    CHECK_EQ(Strtod("27235667517", -109), 27235667517e-109);
    CHECK_EQ(Strtod("653532977297", -123), 653532977297e-123);
    CHECK_EQ(Strtod("3142213164987", -294), 3142213164987e-294);
    CHECK_EQ(Strtod("46202199371337", -72), 46202199371337e-072);
    CHECK_EQ(Strtod("231010996856685", -73), 231010996856685e-073);
    CHECK_EQ(Strtod("9324754620109615", +212), 9324754620109615e+212);
    CHECK_EQ(Strtod("78459735791271921", +49), 78459735791271921e+049);
    CHECK_EQ(Strtod("272104041512242479", +200), 272104041512242479e+200);
    CHECK_EQ(Strtod("6802601037806061975", +198), 6802601037806061975e+198);
    CHECK_EQ(Strtod("20505426358836677347", -221), 20505426358836677347e-221);
    CHECK_EQ(Strtod("836168422905420598437", -234), 836168422905420598437e-234);
    CHECK_EQ(Strtod("4891559871276714924261", +222), 4891559871276714924261e+222);

    // Table 2: Stress Inputs for Conversion to 53-bit Binary, > 1/2 ULP

    CHECK_EQ(Strtod("9", -265), 9e-265);
    CHECK_EQ(Strtod("85", -37), 85e-037);
    CHECK_EQ(Strtod("623", +100), 623e+100);
    CHECK_EQ(Strtod("3571", +263), 3571e+263);
    CHECK_EQ(Strtod("81661", +153), 81661e+153);
    CHECK_EQ(Strtod("920657", -23), 920657e-023);
    CHECK_EQ(Strtod("4603285", -24), 4603285e-024);
    CHECK_EQ(Strtod("87575437", -309), 87575437e-309);
    CHECK_EQ(Strtod("245540327", +122), 245540327e+122);
    CHECK_EQ(Strtod("6138508175", +120), 6138508175e+120);
    CHECK_EQ(Strtod("83356057653", +193), 83356057653e+193);
    CHECK_EQ(Strtod("619534293513", +124), 619534293513e+124);
    CHECK_EQ(Strtod("2335141086879", +218), 2335141086879e+218);
    CHECK_EQ(Strtod("36167929443327", -159), 36167929443327e-159);
    CHECK_EQ(Strtod("609610927149051", -255), 609610927149051e-255);
    CHECK_EQ(Strtod("3743626360493413", -165), 3743626360493413e-165);
    CHECK_EQ(Strtod("94080055902682397", -242), 94080055902682397e-242);
    CHECK_EQ(Strtod("899810892172646163", +283), 899810892172646163e+283);
    CHECK_EQ(Strtod("7120190517612959703", +120), 7120190517612959703e+120);
    CHECK_EQ(Strtod("25188282901709339043", -252), 25188282901709339043e-252);
    CHECK_EQ(Strtod("308984926168550152811", -52), 308984926168550152811e-052);
    CHECK_EQ(Strtod("6372891218502368041059", +64), 6372891218502368041059e+064);
}

#if HAS_FLOAT

TEST_CASE("Strtof - double-conversion") {
  char const* vector;

  vector = "0";
  CHECK_EQ(0.0f, Strtof(vector, 1));
  CHECK_EQ(0.0f, Strtof(vector, 2));
  CHECK_EQ(0.0f, Strtof(vector, -2));
  CHECK_EQ(0.0f, Strtof(vector, -999));
  CHECK_EQ(0.0f, Strtof(vector, +999));

  vector = "1";
  CHECK_EQ(1.0f, Strtof(vector, 0));
  CHECK_EQ(10.0f, Strtof(vector, 1));
  CHECK_EQ(100.0f, Strtof(vector, 2));
  CHECK_EQ(1e20f, Strtof(vector, 20));
  CHECK_EQ(1e22f, Strtof(vector, 22));
  CHECK_EQ(1e23f, Strtof(vector, 23));
  CHECK_EQ(1e35f, Strtof(vector, 35));
  CHECK_EQ(1e36f, Strtof(vector, 36));
  CHECK_EQ(1e37f, Strtof(vector, 37));
  CHECK_EQ(1e-1f, Strtof(vector, -1));
  CHECK_EQ(1e-2f, Strtof(vector, -2));
  CHECK_EQ(1e-5f, Strtof(vector, -5));
  CHECK_EQ(1e-20f, Strtof(vector, -20));
  CHECK_EQ(1e-22f, Strtof(vector, -22));
  CHECK_EQ(1e-23f, Strtof(vector, -23));
  CHECK_EQ(1e-25f, Strtof(vector, -25));
  CHECK_EQ(1e-39f, Strtof(vector, -39));

  vector = "2";
  CHECK_EQ(2.0f, Strtof(vector, 0));
  CHECK_EQ(20.0f, Strtof(vector, 1));
  CHECK_EQ(200.0f, Strtof(vector, 2));
  CHECK_EQ(2e20f, Strtof(vector, 20));
  CHECK_EQ(2e22f, Strtof(vector, 22));
  CHECK_EQ(2e23f, Strtof(vector, 23));
  CHECK_EQ(2e35f, Strtof(vector, 35));
  CHECK_EQ(2e36f, Strtof(vector, 36));
  CHECK_EQ(2e37f, Strtof(vector, 37));
  CHECK_EQ(2e-1f, Strtof(vector, -1));
  CHECK_EQ(2e-2f, Strtof(vector, -2));
  CHECK_EQ(2e-5f, Strtof(vector, -5));
  CHECK_EQ(2e-20f, Strtof(vector, -20));
  CHECK_EQ(2e-22f, Strtof(vector, -22));
  CHECK_EQ(2e-23f, Strtof(vector, -23));
  CHECK_EQ(2e-25f, Strtof(vector, -25));
  CHECK_EQ(2e-39f, Strtof(vector, -39));

  vector = "9";
  CHECK_EQ(9.0f, Strtof(vector, 0));
  CHECK_EQ(90.0f, Strtof(vector, 1));
  CHECK_EQ(900.0f, Strtof(vector, 2));
  CHECK_EQ(9e20f, Strtof(vector, 20));
  CHECK_EQ(9e22f, Strtof(vector, 22));
  CHECK_EQ(9e23f, Strtof(vector, 23));
  CHECK_EQ(9e35f, Strtof(vector, 35));
  CHECK_EQ(9e36f, Strtof(vector, 36));
  CHECK_EQ(9e37f, Strtof(vector, 37));
  CHECK_EQ(9e-1f, Strtof(vector, -1));
  CHECK_EQ(9e-2f, Strtof(vector, -2));
  CHECK_EQ(9e-5f, Strtof(vector, -5));
  CHECK_EQ(9e-20f, Strtof(vector, -20));
  CHECK_EQ(9e-22f, Strtof(vector, -22));
  CHECK_EQ(9e-23f, Strtof(vector, -23));
  CHECK_EQ(9e-25f, Strtof(vector, -25));
  CHECK_EQ(9e-39f, Strtof(vector, -39));

  vector = "12345";
  CHECK_EQ(12345.0f, Strtof(vector, 0));
  CHECK_EQ(123450.0f, Strtof(vector, 1));
  CHECK_EQ(1234500.0f, Strtof(vector, 2));
  CHECK_EQ(12345e20f, Strtof(vector, 20));
  CHECK_EQ(12345e22f, Strtof(vector, 22));
  CHECK_EQ(12345e23f, Strtof(vector, 23));
  CHECK_EQ(12345e30f, Strtof(vector, 30));
  CHECK_EQ(12345e31f, Strtof(vector, 31));
  CHECK_EQ(12345e32f, Strtof(vector, 32));
  CHECK_EQ(12345e-1f, Strtof(vector, -1));
  CHECK_EQ(12345e-2f, Strtof(vector, -2));
  CHECK_EQ(12345e-5f, Strtof(vector, -5));
  CHECK_EQ(12345e-20f, Strtof(vector, -20));
  CHECK_EQ(12345e-22f, Strtof(vector, -22));
  CHECK_EQ(12345e-23f, Strtof(vector, -23));
  CHECK_EQ(12345e-25f, Strtof(vector, -25));
  CHECK_EQ(12345e-39f, Strtof(vector, -39));

  vector = "12345678901234";
  CHECK_EQ(12345678901234.0f, Strtof(vector, 0));
  CHECK_EQ(123456789012340.0f, Strtof(vector, 1));
  CHECK_EQ(1234567890123400.0f, Strtof(vector, 2));
  CHECK_EQ(12345678901234e20f, Strtof(vector, 20));
  CHECK_EQ(12345678901234e22f, Strtof(vector, 22));
  CHECK_EQ(12345678901234e23f, Strtof(vector, 23));
  CHECK_EQ(12345678901234e-1f, Strtof(vector, -1));
  CHECK_EQ(12345678901234e-2f, Strtof(vector, -2));
  CHECK_EQ(12345678901234e-5f, Strtof(vector, -5));
  CHECK_EQ(12345678901234e-20f, Strtof(vector, -20));
  CHECK_EQ(12345678901234e-22f, Strtof(vector, -22));
  CHECK_EQ(12345678901234e-23f, Strtof(vector, -23));
  CHECK_EQ(12345678901234e-25f, Strtof(vector, -25));
  CHECK_EQ(12345678901234e-39f, Strtof(vector, -39));

  vector = "123456789012345";
  CHECK_EQ(123456789012345.0f, Strtof(vector, 0));
  CHECK_EQ(1234567890123450.0f, Strtof(vector, 1));
  CHECK_EQ(12345678901234500.0f, Strtof(vector, 2));
  CHECK_EQ(123456789012345e20f, Strtof(vector, 20));
  CHECK_EQ(123456789012345e22f, Strtof(vector, 22));
  CHECK_EQ(123456789012345e23f, Strtof(vector, 23));
  CHECK_EQ(123456789012345e-1f, Strtof(vector, -1));
  CHECK_EQ(123456789012345e-2f, Strtof(vector, -2));
  CHECK_EQ(123456789012345e-5f, Strtof(vector, -5));
  CHECK_EQ(123456789012345e-20f, Strtof(vector, -20));
  CHECK_EQ(123456789012345e-22f, Strtof(vector, -22));
  CHECK_EQ(123456789012345e-23f, Strtof(vector, -23));
  CHECK_EQ(123456789012345e-25f, Strtof(vector, -25));
  CHECK_EQ(123456789012345e-39f, Strtof(vector, -39));

  CHECK_EQ(0.0f, Strtof("0", 12345));
  CHECK_EQ(0.0f, Strtof("", 1324));
  CHECK_EQ(0.0f, Strtof("000000000", 123));
  CHECK_EQ(0.0f, Strtof("2", -324));
  CHECK_EQ(1e-45f, Strtof("1", -45));
  // It would be more readable to put non-zero literals on the left side (i.e.
  //   CHECK_EQ(1e-46, Strtof("1", -45))), but then Gcc complains that
  // they are truncated to zero.
  CHECK_EQ(0.0f, Strtof("1", -46));
  CHECK_EQ(0.0f, Strtof("1", -47));
  CHECK_EQ(1e-45f, Strtof("1", -45));
  CHECK_EQ(1e-45f, Strtof("8", -46));
  CHECK_EQ(0.0f, Strtof("200000", -51));
  CHECK_EQ(100000e-50f, Strtof("100000", -50));
  CHECK_EQ(0.0f, Strtof("100000", -51));
  CHECK_EQ(0.0f, Strtof("900000", -52));
  CHECK_EQ(0.0f, Strtof("000000001", -47));
  CHECK_EQ(0.0f, Strtof("000000001", -47));
  CHECK_EQ(0.0f, Strtof("00000000200000", -51));
  CHECK_EQ(800000e-50f, Strtof("000000800000", -50));
  CHECK_EQ(0.0f, Strtof("00000000100000", -51));
  CHECK_EQ(1e-45f, Strtof("00000000900000", -51));

  // It would be more readable to put the literals (and not Double::Infinity())
  // on the left side (i.e. CHECK_EQ(3e38, Strtof("3", 38))), but then Gcc
  // complains that the floating constant exceeds range of 'double'.
  CHECK_EQ(std::numeric_limits<float>::infinity(), Strtof("3", 39));
  CHECK_EQ(3e38f, Strtof("3", 38));
  CHECK_EQ(3401e35f, Strtof("3401", 35));
  CHECK_EQ(3401e34f, Strtof("3401", 34));
  CHECK_EQ(std::numeric_limits<float>::infinity(), Strtof("3410", 35));
  CHECK_EQ(34e37f, Strtof("34", 37));
  CHECK_EQ(std::numeric_limits<float>::infinity(), Strtof("0000001", 39));
  CHECK_EQ(3401e35f, Strtof("0000003401", 35));
  CHECK_EQ(3401e34f, Strtof("0000003401", 34));
  CHECK_EQ(std::numeric_limits<float>::infinity(), Strtof("0000003410", 35));
  CHECK_EQ(34e37f, Strtof("00000034", 37));
  CHECK_EQ(1e38f, Strtof("100000", 33));
  CHECK_EQ(3401e35f, Strtof("340100000", 30));
  CHECK_EQ(3401e34f, Strtof("340100000", 29));
  CHECK_EQ(std::numeric_limits<float>::infinity(), Strtof("341000000", 30));
  CHECK_EQ(34e37f, Strtof("3400000", 32));
  CHECK_EQ(1e38f, Strtof("00000100000", 33));
  CHECK_EQ(3401e35f, Strtof("00000340100000", 30));
  CHECK_EQ(3401e34f, Strtof("00000340100000", 29));
  CHECK_EQ(std::numeric_limits<float>::infinity(), Strtof("00000341000000", 30));
  CHECK_EQ(34e37f, Strtof("000003400000", 32));
  CHECK_EQ(3.4028234e+38f, Strtof("34028235676", 28));
  CHECK_EQ(3.4028234e+38f, Strtof("34028235677", 28));
  CHECK_EQ(std::numeric_limits<float>::infinity(), Strtof("34028235678", 28));

  // The following number is the result of 89255.0/1e-22. Both floating-point
  // numbers can be accurately represented with doubles. However on Linux,x86
  // the floating-point stack is set to 80bits and the double-rounding
  // introduces an error.
  CHECK_EQ(89255e-22f, Strtof("89255", -22));

  // Boundary cases. Boundaries themselves should round to even.
  //
  // 0x4f012334 = 2166567936
  //      next:   2166568192
  //  boundary:   2166568064 should round down.
  CHECK_EQ(2166567936.0f, Strtof("2166567936", 0));
  CHECK_EQ(2166568192.0f, Strtof("2166568192", 0));
  CHECK_EQ(2166567936.0f, Strtof("2166568064", 0));
  CHECK_EQ(2166567936.0f, Strtof("216656806399999", -5));
  CHECK_EQ(2166568192.0f, Strtof("216656806400001", -5));
  // Verify that we don't double round.
  // Get the boundary of the boundary.
  CHECK_EQ(2.1665680640000002384185791015625e9, 2166568064.0);
  // Visual Studio gets this wrong and believes that these two numbers are the
  // same doubles. We want to test our conversion and not the compiler. We
  // therefore disable the check.
#ifndef _MSC_VER
  CHECK(2.16656806400000023841857910156251e9 != 2166568064.0);
#endif
  CHECK_EQ(2166568192.0f, Strtof("21665680640000002384185791015625", -22));

  // 0x4fffffff = 8589934080
  //      next:   8589934592
  //  boundary:   8589934336 should round up.
  CHECK_EQ(8589934080.0f, Strtof("8589934080", 0));
  CHECK_EQ(8589934592.0f, Strtof("8589934592", 0));
  CHECK_EQ(8589934592.0f, Strtof("8589934336", 0));
  CHECK_EQ(8589934080.0f, Strtof("858993433599999", -5));
  CHECK_EQ(8589934592.0f, Strtof("858993433600001", -5));
  // Verify that we don't double round.
  // Get the boundary of the boundary.
  // Visual Studio gets this wrong. To avoid failing tests because of a broken
  // compiler we disable the following two tests. They were only testing the
  // compiler. The real test is still active.
#ifndef _MSC_VER
  CHECK_EQ(8.589934335999999523162841796875e+09, 8589934336.0);
  CHECK(8.5899343359999995231628417968749e+09 != 8589934336.0);
#endif
  CHECK_EQ(8589934080.0f, Strtof("8589934335999999523162841796875", -21));

  // 0x4f000000 = 2147483648
  //      next:   2147483904
  //  boundary:   2147483776 should round down.
  CHECK_EQ(2147483648.0f, Strtof("2147483648", 0));
  CHECK_EQ(2147483904.0f, Strtof("2147483904", 0));
  CHECK_EQ(2147483648.0f, Strtof("2147483776", 0));
  CHECK_EQ(2147483648.0f, Strtof("214748377599999", -5));
  CHECK_EQ(2147483904.0f, Strtof("214748377600001", -5));

}

TEST_CASE("Testbase - single")
{
    // Table 14: Stress Inputs for Conversion to 24-bit Binary, < 1/2 ULP

    CHECK_EQ(Strtof("5", -20), 5e-20f);
    CHECK_EQ(Strtof("67", +14), 67e+14f);
    CHECK_EQ(Strtof("985", +15), 985e+15f);
    CHECK_EQ(Strtof("7693", -42), 7693e-42f);
    CHECK_EQ(Strtof("55895", -16), 55895e-16f);
    CHECK_EQ(Strtof("996622", -44), 996622e-44f);
#ifndef _MSC_VER // cl.exe gets the floating-point literal wrong
    CHECK_EQ(Strtof("7038531", -32), 7038531e-32f);
#endif
    CHECK_EQ(Strtof("60419369", -46), 60419369e-46f);
    CHECK_EQ(Strtof("702990899", -20), 702990899e-20f);
    CHECK_EQ(Strtof("6930161142", -48), 6930161142e-48f);
    CHECK_EQ(Strtof("25933168707", +13), 25933168707e+13f);
    CHECK_EQ(Strtof("596428896559", +20), 596428896559e+20f);

    CHECK_EQ(Strtof("5", -20), std::strtof("5e-20", nullptr));
    CHECK_EQ(Strtof("67", +14), std::strtof("67e+14", nullptr));
    CHECK_EQ(Strtof("985", +15), std::strtof("985e+15", nullptr));
    CHECK_EQ(Strtof("7693", -42), std::strtof("7693e-42", nullptr));
    CHECK_EQ(Strtof("55895", -16), std::strtof("55895e-16", nullptr));
    CHECK_EQ(Strtof("996622", -44), std::strtof("996622e-44", nullptr));
    CHECK_EQ(Strtof("7038531", -32), std::strtof("7038531e-32", nullptr));
    CHECK_EQ(Strtof("60419369", -46), std::strtof("60419369e-46", nullptr));
    CHECK_EQ(Strtof("702990899", -20), std::strtof("702990899e-20", nullptr));
    CHECK_EQ(Strtof("6930161142", -48), std::strtof("6930161142e-48", nullptr));
    CHECK_EQ(Strtof("25933168707", +13), std::strtof("25933168707e+13", nullptr));
    CHECK_EQ(Strtof("596428896559", +20), std::strtof("596428896559e+20", nullptr));

    // Table 15: Stress Inputs for Conversion to 24-bit Binary, > 1/2 ULP

    CHECK_EQ(Strtof("3", -23), 3e-23f);
    CHECK_EQ(Strtof("57", +18), 57e+18f);
    CHECK_EQ(Strtof("789", -35), 789e-35f);
    CHECK_EQ(Strtof("2539", -18), 2539e-18f);
    CHECK_EQ(Strtof("76173", +28), 76173e+28f);
    CHECK_EQ(Strtof("887745", -11), 887745e-11f);
    CHECK_EQ(Strtof("5382571", -37), 5382571e-37f);
#ifndef _MSC_VER
    CHECK_EQ(Strtof("82381273", -35), 82381273e-35f);
#endif
    CHECK_EQ(Strtof("750486563", -38), 750486563e-38f);
    CHECK_EQ(Strtof("3752432815", -39), 3752432815e-39f);
    CHECK_EQ(Strtof("75224575729", -45), 75224575729e-45f);
    CHECK_EQ(Strtof("459926601011", +15), 459926601011e+15f);

    CHECK_EQ(Strtof("3", -23), std::strtof("3e-23", nullptr));
    CHECK_EQ(Strtof("57", +18), std::strtof("57e+18", nullptr));
    CHECK_EQ(Strtof("789", -35), std::strtof("789e-35", nullptr));
    CHECK_EQ(Strtof("2539", -18), std::strtof("2539e-18", nullptr));
    CHECK_EQ(Strtof("76173", +28), std::strtof("76173e+28", nullptr));
    CHECK_EQ(Strtof("887745", -11), std::strtof("887745e-11", nullptr));
    CHECK_EQ(Strtof("5382571", -37), std::strtof("5382571e-37", nullptr));
    CHECK_EQ(Strtof("82381273", -35), std::strtof("82381273e-35", nullptr));
    CHECK_EQ(Strtof("750486563", -38), std::strtof("750486563e-38", nullptr));
    CHECK_EQ(Strtof("3752432815", -39), std::strtof("3752432815e-39", nullptr));
    CHECK_EQ(Strtof("75224575729", -45), std::strtof("75224575729e-45", nullptr));
    CHECK_EQ(Strtof("459926601011", +15), std::strtof("459926601011e+15", nullptr));
}

#endif // HAS_FLOAT
